
GPIOx_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001fc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000398  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00001398  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00001398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000398  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00001390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000394  08000394  00001394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000398  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000398  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000054e  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000262  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00001b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000051  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b85  00000000  00000000  00001c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000090f  00000000  00000000  000037ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000074fa  00000000  00000000  000040dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000b5d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000100  00000000  00000000  0000b61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0000b71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000378 	.word	0x08000378

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000378 	.word	0x08000378

080001d4 <GPIO_Set_Pin_Mode>:
#include <stdlib.h>
#include "gpio.h"



int GPIO_Set_Pin_Mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
	// Clear Pin bits, then set mode.
	GPIOx->MODER &= ~(3UL << (2 * Pin));
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	68bb      	ldr	r3, [r7, #8]
 80001e6:	005b      	lsls	r3, r3, #1
 80001e8:	2103      	movs	r1, #3
 80001ea:	fa01 f303 	lsl.w	r3, r1, r3
 80001ee:	43db      	mvns	r3, r3
 80001f0:	401a      	ands	r2, r3
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (Mode << (2 * Pin));
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	005b      	lsls	r3, r3, #1
 80001fe:	6879      	ldr	r1, [r7, #4]
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
 8000204:	431a      	orrs	r2, r3
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	601a      	str	r2, [r3, #0]
	return 0;
 800020a:	2300      	movs	r3, #0
}
 800020c:	4618      	mov	r0, r3
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <GPIO_Init>:

int GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_Init_TypeDef *InitStruct) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	// TODO: Add more setter functions for all other registers.
	GPIO_Set_Pin_Mode(GPIOx, InitStruct->Pin, InitStruct->Mode);
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	6819      	ldr	r1, [r3, #0]
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	461a      	mov	r2, r3
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	f7ff ffd1 	bl	80001d4 <GPIO_Set_Pin_Mode>
	return 0;
 8000232:	2300      	movs	r3, #0
}
 8000234:	4618      	mov	r0, r3
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <GPIO_Toggle_Pin>:

int GPIO_Toggle_Pin(GPIO_TypeDef *GPIOx, uint32_t Pin) {
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
	GPIOx->ODR ^= (1UL << Pin);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	695a      	ldr	r2, [r3, #20]
 800024a:	2101      	movs	r1, #1
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
 8000252:	405a      	eors	r2, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	615a      	str	r2, [r3, #20]
	return 0;
 8000258:	2300      	movs	r3, #0
}
 800025a:	4618      	mov	r0, r3
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
	...

08000268 <ENABLE_GPIOA_Clock>:
#include "gpio.h"

#define GPIOA_ENABLE 	(1UL << 0);


void ENABLE_GPIOA_Clock() {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOA_ENABLE;
 800026c:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <ENABLE_GPIOA_Clock+0x1c>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <ENABLE_GPIOA_Clock+0x1c>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800

08000288 <main>:
//	GPIOx->ODR ^= (1UL << Pin);
//	return 0;
//}

int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b088      	sub	sp, #32
 800028c:	af00      	add	r7, sp, #0
	/* Enable clock for GPIOA */
	ENABLE_GPIOA_Clock();
 800028e:	f7ff ffeb 	bl	8000268 <ENABLE_GPIOA_Clock>

	/* Initialize GPIOA registers */
	GPIO_Init_TypeDef InitStruct = {};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
 80002a0:	615a      	str	r2, [r3, #20]
	InitStruct.Pin = GPIO_PIN_5;
 80002a2:	2305      	movs	r3, #5
 80002a4:	607b      	str	r3, [r7, #4]
	InitStruct.Mode = GPIO_MODE_OUTPUT;
 80002a6:	2301      	movs	r3, #1
 80002a8:	60bb      	str	r3, [r7, #8]

	GPIO_Init(GPIOA, &InitStruct);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	4809      	ldr	r0, [pc, #36]	@ (80002d4 <main+0x4c>)
 80002b0:	f7ff ffb2 	bl	8000218 <GPIO_Init>

    /* Loop forever */
	for(;;)
	{
		GPIO_Toggle_Pin(GPIOA, GPIO_PIN_5);
 80002b4:	2105      	movs	r1, #5
 80002b6:	4807      	ldr	r0, [pc, #28]	@ (80002d4 <main+0x4c>)
 80002b8:	f7ff ffc0 	bl	800023c <GPIO_Toggle_Pin>
		for (int i = 0; i < 500000;++i);
 80002bc:	2300      	movs	r3, #0
 80002be:	61fb      	str	r3, [r7, #28]
 80002c0:	e002      	b.n	80002c8 <main+0x40>
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	3301      	adds	r3, #1
 80002c6:	61fb      	str	r3, [r7, #28]
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	4a03      	ldr	r2, [pc, #12]	@ (80002d8 <main+0x50>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	ddf8      	ble.n	80002c2 <main+0x3a>
		GPIO_Toggle_Pin(GPIOA, GPIO_PIN_5);
 80002d0:	e7f0      	b.n	80002b4 <main+0x2c>
 80002d2:	bf00      	nop
 80002d4:	40020000 	.word	0x40020000
 80002d8:	0007a11f 	.word	0x0007a11f

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	@ (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	@ (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	@ (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 f811 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ffbb 	bl	8000288 <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	4d0d      	ldr	r5, [pc, #52]	@ (8000368 <__libc_init_array+0x38>)
 8000334:	4c0d      	ldr	r4, [pc, #52]	@ (800036c <__libc_init_array+0x3c>)
 8000336:	1b64      	subs	r4, r4, r5
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	2600      	movs	r6, #0
 800033c:	42a6      	cmp	r6, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	4d0b      	ldr	r5, [pc, #44]	@ (8000370 <__libc_init_array+0x40>)
 8000342:	4c0c      	ldr	r4, [pc, #48]	@ (8000374 <__libc_init_array+0x44>)
 8000344:	f000 f818 	bl	8000378 <_init>
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	2600      	movs	r6, #0
 800034e:	42a6      	cmp	r6, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f855 3b04 	ldr.w	r3, [r5], #4
 8000358:	4798      	blx	r3
 800035a:	3601      	adds	r6, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000362:	4798      	blx	r3
 8000364:	3601      	adds	r6, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
